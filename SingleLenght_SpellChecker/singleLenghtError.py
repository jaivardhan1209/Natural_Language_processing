# -*- coding: utf-8 -*-
"""
Created on Tue Oct 30 17:46:25 2018

@author: jvard
"""

from collections import Counter
import re
import sys

## Global Variable 
Words ={}
Word_Count = 0

## Preprocessing work to create a list of words with their occurence. 
## input is case insensitive.
def words(text): return re.findall(r'\w+', text.lower())

def LoadDictionary(path):
    global Words
    Words = Counter(words(open(path).read()))
    global Word_Count
    Word_Count= sum(Words.values())

## probability of any given word 
def probabilityOfWord(word): 
    "Probability of `word`."
    return Words[word] / Word_Count

## validate the word is present in vocabilary or not
def validateWord(wordset):
    validWords = []
    for word in wordset:
        if word in Words:
            validWords.append(word)
    return validWords
        

### Find the candidate words for the input word
''' Cases: 1. Input word is correct word
           2. Candidate could be generated by using Insert/delete/transpose/replace
'''
def Candidates(word):   
    ## either correct word or generated word
    validatedWord = validateWord([word])
    if validatedWord != []:
        ## this word is correct and we dont need any modification 
        return [word]
    ## otherwise we need to do ins/del/trans/repl operation to generate candidate words
    otherCandidates = validateWord(populateDistance1Word(word))
    return otherCandidates
    
def populateDistance1Word(word):
    ##All permutation of words at 1 error.
    letters    = 'abcdefghijklmnopqrstuvwxyz'
    ## split the word from left to right
    splits     = [(word[:i], word[i:])    for i in range(len(word) + 1)]
    ## create deleted set after deleting each character from Right split
    deletes    = [L + R[1:]               for L, R in splits if R]
    ## create transpose set after transposing the character from Right split
    transposes = [L + R[1] + R[0] + R[2:] for L, R in splits if len(R)>1]
    ## create the replace set after replacing each character in the letter
    replaces   = [L + c + R[1:]           for L, R in splits if R for c in letters]
    ## insert each character between the left and right split accordingly.
    inserts    = [L + c + R               for L, R in splits for c in letters]
    return set(deletes + transposes + replaces + inserts)

def PerformCorrection(word):
    candidates = Candidates(word)
    maxProbability = 0
    finalword = ''
    for candidate in candidates:
        probab = probabilityOfWord(candidate)
        print(candidate + '->' + str(probab))
        if probab > maxProbability:
            maxProbability = probab
            finalword = candidate
    return finalword

##### Main Method ###################
if __name__ == "__main__":
    vocabpath = input("Please give the path of Dictionary: ")
    LoadDictionary(vocabpath)
    print("Dictionary Loaded Successfully!!")
    while True:
        modelInputType = input("What is type of input? For single word Press S. For Paragraph Press P: ")
        if modelInputType.lower() == 's':
            errorWord = input("Enter the word to check: ")
            print("Input word->" + errorWord)
            print("Correct Word->" + PerformCorrection(errorWord.lower()))
        elif modelInputType.lower() == 'p':
        # split the text and perform for each word.
            inputText = input("Enter the text: ")
            wordset = words(inputText)
            for word in wordset:
                correctWord = PerformCorrection(word)
                if correctWord != word:
                    print("ErrorWord:->" + word)
                    print("Correct Word:->" + correctWord)
        else:
            print("Select Correct Input")
        wantToContinue = input("Press Y to continue N to exit:-> ")
        if wantToContinue.lower() == 'y':
            continue
        else:
            break
    
        
        